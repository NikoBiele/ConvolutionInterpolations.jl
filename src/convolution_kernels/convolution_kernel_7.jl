# see 'docstring.jl' for documentation
function (::ConvolutionKernel{7})(s::T) where {T} # 7th order accurate 7th degree
    s_abs = abs(s)
    coef = Dict(
        # 6 equation sextic, 7th order accurate
        :eq1 => [1, 0, -1173431/624240, 0, 922243/749088, 0, -7587149/14981760, 258097/1664640],
        :eq2 => [106117/124848, 834167/1248480, -1709177/624240, -119839/249696, 2712769/749088, -214769/83232, 11023027/14981760, -384481/4993920], 
        :eq3 => [30587/2448, -35785081/1248480, 376423/15606, -126025/14688, 794957/1498176, 13571/27744, -796241/5992704, 105457/9987840], 
        :eq4 => [-2861771/41616, 325209229/2496960, -129943051/1248480, 22764947/499392, -17736439/1498176, 303937/166464, -4645469/29963520, 167719/29963520],
        :eq5 => [9845663/124848, -908278361/7490880, 99126901/1248480, -14343661/499392, 9292729/1498176, -399533/499392, 1710679/29963520, -52123/29963520], 
        :eq6 => [9711/1156, -29133/2890, 119769/23120, -20501/13872, 14027/55488, -1079/41616, 44239/29963520, -1079/29963520]
    )
    if s_abs < 1.0
        return horner(s_abs, coef, :eq1)
    elseif s_abs < 2.0
        return horner(s_abs, coef, :eq2)
    elseif s_abs < 3.0
        return horner(s_abs, coef, :eq3)
    elseif s_abs < 4.0
        return horner(s_abs, coef, :eq4)
    elseif s_abs < 5.0
        return horner(s_abs, coef, :eq5)
    elseif s_abs < 6.0
        return horner(s_abs, coef, :eq6)
    else
        return 0.0
    end
end