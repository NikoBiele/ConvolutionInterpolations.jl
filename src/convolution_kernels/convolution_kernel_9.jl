# see 'docstring.jl' for documentation
function (::ConvolutionKernel{9})(s::T) where {T} # 7 equation 7th order accurate 9th degree
    s_abs = abs(s)
    coef = Dict(
        # 7 equation nonic, 7th order accurate
        :eq1 => [1, 0, -1228311859/656862720, 0, 2374505273/1970588160, 0, -818196437/1970588160, 0, 11829761099/110352936960, -2979600563/110352936960], 
        :eq2 => [238388010589/220705873920, -266459153773/441411747840, 33401029/444971520, -10854702749/3152941056, 24832219889/5254901760, -59181928697/31529410560, -204568201/788235264, 44456683841/110352936960, -24478472857/220705873920, 648090097/63058821120],
        :eq3 => [-911311341191/44141174784, 111463951723961/1324235243520, -1187668128659/8276470272, 6325760530637/47294115840, -713586937963/9458823168, 2538867747637/94588231680, -14292057925/2364705792, 274967867411/331058810880, -1041166915/16552940544, 2612454491/1324235243520], 
        :eq4 => [970127058913/3941176320, -217673366380741/331058810880, 9070101940039/11823528960, -6072819678061/11823528960, 2575198645663/11823528960, -1436772883673/23647057920, 26408492351/2364705792, -108098000287/82764702720, 8353063619/94588231680, -83024333/31529410560], 
        :eq5 => [-1626189980101/5517646848, 207656344018747/331058810880, -16150575419141/27588234240, 3723217994899/11823528960, -141514262681/1313725440, 575297062439/23647057920, -14311579063/3941176320, 28613426497/82764702720, -4207843949/220705873920, 61488029/132423524352], 
        :eq6 => [-14928448356433/44141174784, 708641710840613/1324235243520, -15536126370899/41382351360, 7250268307721/47294115840, -1899309134641/47294115840, 662137232881/94588231680, -9601065439/11823528960, 20014122263/331058810880, -867848161/331058810880, 3181151/63058821120], 
        :eq7 => [-230820161411/31529410560, 362717396503/37835292672, -32974308773/5911764480, 89501695241/47294115840, -19515407233/47294115840, 5671965649/94588231680, -13733573/2364705792, 17096897/47294115840, -280277/21358632960, 280277/1324235243520]
    )
    if s_abs < 1.0
        return horner(s_abs, coef, :eq1)
    elseif s_abs < 2.0
        return horner(s_abs, coef, :eq2)
    elseif s_abs < 3.0
        return horner(s_abs, coef, :eq3)
    elseif s_abs < 4.0
        return horner(s_abs, coef, :eq4)
    elseif s_abs < 5.0
        return horner(s_abs, coef, :eq5)
    elseif s_abs < 6.0
        return horner(s_abs, coef, :eq6)
    elseif s_abs < 7.0
        return horner(s_abs, coef, :eq7)
    else
        return 0.0
    end
end